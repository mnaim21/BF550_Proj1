# Class testing
a1 = array([[1, 2, 3], [1, 2, 3], [4, 1, 1]])
a2 = array([[2, 2, 1], [4, 5, 6], [2, 3, 1]])
b1 = array([[1, 2], [2, 3]])
b2 = array([[3, 4], [2, 1]])
c1 = array([[1, 2, 3, 4], [1, 2, 3, 4]])
c2 = array([[4, 3, 2, 1], [2, 2, 5, 6]])
d = array([1, 2, 3, 4])
e = array([[1], [2], [3], [4]])
f = array([[1], [2], [3]])
g = array([[1], [2]])
h = array([[1, 2], [4, 5], [7, 8]])
i = array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 1, 2, 3], [4, 5, 6, 7]])

# Input testing
array([[1, 2, 3], [2, 1], [3, 2, 1]]) # should return error
array([[1, 2.0], [2, 3]]) # floats and ints - should be okay
array([["hi", 1], [2, "yes"]]) # should return error
array([["hi"], ["hello"]]) # should return error

# Transpose
b2.transpose().data == [[3, 2], [4, 1]]
d.transpose().data == [[1], [2], [3], [4]]
e.transpose().data == [[1, 2, 3, 4]]
i.transpose().data ==[[1, 5, 9, 4], [2, 6, 1, 5], [3, 7, 2, 6], [4, 8, 3, 7]]

# Sum
a1.sum() == 18
a1.sum(0).data == [[6], [6], [6]]
a1.sum(1).data == [[6, 5, 7]]
d.sum() == 10
d.sum(0).data == [[10]]
d.sum(1).data == [[1,2,3,4]]
e.sum() == 10
e.sum(0).data == [[1], [2], [3], [4]]
e.sum(1).data == [[10]]
i.sum() == 73
i.sum(0).data == [[10], [26], [15], [22]]
i.sum(1).data == [[19, 14, 18, 22]]

# Addition
(a1 + a2).data == [[3, 4, 4], [5, 7, 9], [6, 4, 2]]
(a1 + 3).data == [[4, 5, 6], [4, 5, 6], [7, 4, 4]]
(b1 + b2).data == [[4, 6], [4, 4]]
(d + d).data == [[2, 4, 6, 8]]
(d + 1).data == [[2, 3, 4, 5]]
(e + e).data == [[2], [4], [6], [8]]
(e + 2).data == [[3], [4], [5], [6]]
(a1 + b1).data # Should return error

# Subtraction
(a1 - a2).data == [[-1, 0, 2], [-3, -3, -3], [2, -2, 0]]
(a1 - 3).data == [[-2, -1, 0], [-2, -1, 0], [1, -2, -2]]
(b1 - b2).data == [[-2, -2], [0, 2]]
(d - d).data == [[0, 0, 0, 0]]
(d - 1).data == [[0, 1, 2, 3]]
(e - e).data == [[0], [0], [0], [0]]
(e - 2).data == [[-1], [0], [1], [2]]
(a1 - b1).data # Should return error

# Multiplication
(a1 * a2).data == [[2, 4, 3], [4, 10, 18], [8, 3, 1]]
(a1 * 3).data == [[3, 6, 9], [3, 6, 9], [12, 3, 3]]
(b1 * b2).data == [[3, 8], [4, 3]]
(d * d).data == [[1, 4, 9, 16]]
(d * 1).data == [[1, 2, 3, 4]]
(e * e).data == [[1], [4], [9], [16]]
(e * 2).data == [[2], [4], [6], [8]]
(a1 * b1).data # Should return error

# Division
(a1 / a2).data == [[0.5, 1.0, 3.0], [0.25, 0.4, 0.5], [2.0, 0.3333333333333333, 1.0]]
(a1 / 3).data == [[0.3333333333333333, 0.6666666666666666, 1.0],
 [0.3333333333333333, 0.6666666666666666, 1.0],
 [1.3333333333333333, 0.3333333333333333, 0.3333333333333333]]
(b1 / b2).data == [[0.3333333333333333, 0.5], [1.0, 3.0]]
(d / d).data == [[1.0, 1.0, 1.0, 1.0]]
(d / 1).data == [[1.0, 2.0, 3.0, 4.0]]
(e / e).data == [[1.0], [1.0], [1.0], [1.0]]
(e / 2).data == [[0.5], [1.0], [1.5], [2.0]]
(a1 / b1).data # Should return error

# Negation
-a1.data == [[-1, -2, -3], [-1, -2, -3], [-4, -1, -1]]
-d.data == [[-1, -2, -3, -4]]
-e.data == [[-1], [-2], [-3], [-4]]

# Exponentiation
(a1 ** 2).data == [[1, 4, 9], [1, 4, 9], [16, 1, 1]]
(c1 ** 3).data == [[1, 8, 27, 64], [1, 8, 27, 64]]
(d ** 4).data == [[1, 16, 81, 256]]
(e ** 5).data == [[1], [32], [243], [1024]]

# Get item
a1[(1, 0)] == 1
c1[(2, 1)] # Should get error
c1[(0, 2)] == 3
d[(0, 2)] == 3
e[(1, 0)] == 2
c2[(-1, -1)] == 6 # look at this see if it makes sense

# Dot product
a1.dot(a2).data == [[16, 21, 16], [16, 21, 16], [14, 16, 11]]
b1.dot(b2).data == [[7, 6], [12, 11]]
a1.dot(f).data == [[14], [14], [9]]
b1.dot(g).data == [[5], [8]]
a1.dot(b1).data # Should return error
b1.dot(a1).data # Should return error
d.dot(e).data == [[30]]
a1.dot(h).data == [[30, 36], [30, 36], [15, 21]]

# Mean
a1.mean(0).data == [[2.0], [2.0], [2.0]]
a1.mean(1).data == [[2.0, 1.6666666666666667, 2.3333333333333335]]
i.mean(0).data == [[2.5], [6.5], [3.75], [5.5]]
i.mean(1).data == [[4.75, 3.5, 4.5, 5.5]]
d.mean(0).data == [[2.5]]
d.mean(1).data == [[1.0, 2.0, 3.0, 4.0]]
e.mean(0).data == [[1.0], [2.0], [3.0], [4.0]]
e.mean(1).data == [[2.5]]

# Covariance Table
a1.var().data ==[[2.0, -0.6666666666666666, -1.3333333333333333],
 [-0.6666666666666666, 0.2222222222222222, 0.4444444444444444],
 [-1.3333333333333333, 0.4444444444444444, 0.8888888888888888]]
b1.var().data == [[0.25, 0.25], [0.25, 0.25]]
i.var().data ==[[8.1875, -1.375, -1.375, -1.375],
 [-1.375, 4.25, 4.25, 4.25],
 [-1.375, 4.25, 4.25, 4.25],
 [-1.375, 4.25, 4.25, 4.25]]






# Can ignore everything below this line
# Additional arrays for testing
testing = [[1, 2], [3, 4], [5, 6]]
tester = [[2, 1], [3, 4]]
single = [6, 1, 4, 6]
floater = [[4.2, 5.0, 1.7, 9.3], [1.2, 4.8, 1.9, 3.8]]
row = [2, 3, 1]
column = [[2], [3], [4]]
inconsistent = [[1, 3], [1, 2, 4], [2, 5]]
covtest = [[2, 3, 1, 5], [5, 2, 1, 6], [5, 1, 4, 6], [6, 2, 2, 1]]

# NumPy testing and context
import numpy as np
testnp = np.array([[1, 2, 7], [7, 5, 3]])
np.array([1,2,3,4])
